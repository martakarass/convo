% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convo_func.R
\name{RunningL2Norm}
\alias{RunningL2Norm}
\title{Fast Running L2 Norm Computation}
\usage{
RunningL2Norm(x, y, circular = FALSE)
}
\arguments{
\item{x}{numeric sequence}

\item{y}{numeric sequence, of equal or shorter length than  \code{x} sequence}

\item{circular}{logical; whether  running  L2 norm  is computed assuming
circular nature of  \code{x} sequence (see Details)}
}
\value{
numeric sequence
}
\description{
Computes running L2 norm between two sequences in a fixed width window,
whose length corresponds to the length of the shorter sequence.  Uses
convolution via Fast Fourier Transform.
}
\details{
Computes running  L2 norm between two sequences in a fixed width window.
The length of a window is equal to the shorter of the two sequences (\code{y}), and window
"runs" over the length of longer sequence (\code{x}).

Parameter \code{circular} determines whether \code{x} sequence is assumed to
have a  circular nature. Assume \eqn{l_x} is the length of longer sequence \code{x}, \eqn{l_y} is the length of shorter sequence \code{y}.
* If \code{circular} equals \code{TRUE}, then the output sequence has length equal to the length of \code{x} sequence. First element of the output sequence corresponds to  L2 norm  between \code{x[1:l_y]} window of  \code{x} sequence and \code{y} sequence.  Last  element of the output sequence corresponds to  L2 norm  between \code{x[(l_x):(l_y - 1)]} window of  \code{x} sequence and \code{y} sequence.
* If \code{circular} equals \code{FALSE}, then the output sequence has length equal to  \eqn{l_x - l_y + 1}. First element of the output sequence corresponds to  L2 norm  between \code{x[1:l_y]} window of  \code{x} sequence and \code{y} sequence. Last  element of the output sequence corresponds to  L2 norm  between \code{x[(l_x - l_y + 1):l_x]} window of  \code{x} sequence and \code{y} sequence.
}
\examples{
x <- sin(seq(0, 1, length.out = 1000) * 2 * pi * 6)
y1 <- x[1:100] + rnorm(100)
y2 <- rnorm(100)
out1 <- RunningL2Norm(x, y1)
out2 <- RunningL2Norm(x, y2)
plot(out1, type = "l"); points(out2, col = "blue")

}
