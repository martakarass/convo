% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convo_func.R
\name{RunningCor}
\alias{RunningCor}
\title{Fast Running Correlation Computation}
\usage{
RunningCor(x, y, circular = FALSE)
}
\arguments{
\item{x}{A numeric vector.}

\item{y}{A numeric vector, of equal or shorter length than  \code{x} sequence.}

\item{circular}{logical; whether  running correlation is computed assuming
circular nature of  \code{x} sequence (see Details).}
}
\value{
A numeric vector.
}
\description{
Computes running correlation between two sequences in a fixed width window,
whose length corresponds to the length of the shorter sequence.  Uses
convolution via Fast Fourier Transform.
}
\details{
Computes running correlation between two sequences in a fixed width window.
The length of a window is equal to the shorter of the two sequences (\code{y}), and window
"runs" over the length of longer sequence (\code{x}).

The length of output vector equals the length of \code{x} vector.
Parameter \code{circular} determines whether \code{x} sequence is assumed to have a  circular nature. Assume \eqn{l_x} is the length of sequence \code{x}, \eqn{l_y} is the length of shorter sequence \code{y}.

If \code{circular} equals \code{TRUE} then
  \itemize{
    \item first element of the output sequence corresponds to sample correlation between \code{x[1:l_y]} and \code{y},
    \item last element of the output sequence corresponds to sample correlation between \code{c(x[l_x], x[1:(l_y - 1)])}  and \code{y}.
  }

If \code{circular} equals \code{FALSE} then
  \itemize{
    \item first element of the output sequence corresponds to sample correlation between \code{x[1:l_y]} and \code{y},
    \item the \eqn{l_x - W + 1}-th element of the output sequence corresponds to sample correlation between \code{x[(l_x - l_y + 1):l_x]},
    \item last \code{W-1} elements of the output sequence are filled with \code{NA}.
  }
}
\examples{
x <- sin(seq(0, 1, length.out = 1000) * 2 * pi * 6)
y <- x[1:100]
out1 <- RunningCor(x, y, circular = TRUE)
out2 <- RunningCor(x, y, circular = FALSE)
plot(out1, type = "l"); points(out2, col = "red")

}
